# Copyright (C) 2020, Sardoodledom (github1@lotkit.org)
# All rights reserved.
#
# Although you can see the source code, it is not free and is
# protected by copyright. If you are interested in using it, please
# contact us at: github1@lotkit.org

import flask_sqlalchemy
import sqlalchemy.ext.automap

import flask
import flask_login
from openapi_webserver.login import login_manager

# https://flask.palletsprojects.com/en/1.1.x/patterns/appfactories/#factories-extensions
db = flask_sqlalchemy.SQLAlchemy()


#todo: handle this: https://stackoverflow.com/a/10696264
# hm, e.g. by removing cookie when password is changed or when 'is_enabled' is changed.



def get_title_id_of_uid(uid: str):
    return db.session.query(Title.id).filter_by(uid=uid).first()[0]
 




#https://stackoverflow.com/questions/10695093/how-to-implement-user-loader-callback-in-flask-login
#https://stackoverflow.com/questions/12075535/flask-login-cant-understand-how-it-works
def find_enabled_user_with_id(id):
    found_user = None

    with flask.current_app.app_context():
        found_user = db.session.query(User).filter_by(id=id, is_enabled=1).first()

    if found_user is None:
        return found_user

    #return User(u.name,u.id,u.active)
    return found_user
        
@login_manager.user_loader
def load_user(user_id):
    #return User.get(user_id)
    return find_enabled_user_with_id(user_id)


#generated by
# pip install sqlacodegen
# sqlacodegen sqlite:///webserver.db
#
# +
#
#class User(Base):
#->
#class User(flask_login.UserMixin, Base):

# coding: utf-8
from sqlalchemy import Boolean, Column, DateTime, ForeignKey, Integer, String, Text, UniqueConstraint, text
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()
metadata = Base.metadata


class Organization(Base):
    __tablename__ = 'organization'

    id = Column(Integer, primary_key=True)
    uid = Column(Text, nullable=False, unique=True, server_default=text("'org-' || lower(hex(randomblob(2)))"))
    created_at = Column(DateTime, nullable=False, server_default=text("DATETIME('now')"))


class Title(Base):
    __tablename__ = 'title'

    id = Column(Integer, primary_key=True)
    uid = Column(Text, nullable=False, unique=True, server_default=text("'title-' || lower(hex(randomblob(2)))"))
    created_at = Column(DateTime, nullable=False, server_default=text("DATETIME('now')"))


class TitleIsAllowedToDoEverything(Base):
    __tablename__ = 'title_is_allowed_to_do_everything'

    id = Column(Integer, primary_key=True)
    title_id = Column(Integer, nullable=False)
    annotation = Column(Text, nullable=False, server_default=text("\"\""))
    created_at = Column(DateTime, nullable=False, server_default=text("DATETIME('now')"))


class TitleIsAllowedToDoEverythingOnOrganizationWebserver(Base):
    __tablename__ = 'title_is_allowed_to_do_everything_on_organization_webservers'

    id = Column(Integer, primary_key=True)
    title_id = Column(Integer, nullable=False)
    annotation = Column(Text, nullable=False, server_default=text("\"\""))
    created_at = Column(DateTime, nullable=False, server_default=text("DATETIME('now')"))


class TitleIsAllowedToDoMakeOthersTrustee(Base):
    __tablename__ = 'title_is_allowed_to_do_make_others_trustee'

    id = Column(Integer, primary_key=True)
    title_id = Column(Integer, nullable=False)
    annotation = Column(Text, nullable=False, server_default=text("\"\""))
    created_at = Column(DateTime, nullable=False, server_default=text("DATETIME('now')"))


class ExistingRole(Base):
    __tablename__ = 'existing_role'
    __table_args__ = (
        UniqueConstraint('title_id', 'organization_id'),
    )

    id = Column(Integer, primary_key=True)
    uid = Column(Text, nullable=False, unique=True, server_default=text("'role-' || lower(hex(randomblob(2)))"))
    title_id = Column(ForeignKey('title.id'), nullable=False)
    organization_id = Column(ForeignKey('organization.id'), nullable=False)
    created_at = Column(DateTime, nullable=False, server_default=text("DATETIME('now')"))

    organization = relationship('Organization')
    title = relationship('Title')


class OrganizationTranslation(Base):
    __tablename__ = 'organization_translation'
    __table_args__ = (
        UniqueConstraint('locale', 'long_name', 'short_name'),
        UniqueConstraint('locale', 'long_name'),
        UniqueConstraint('locale', 'organization_id'),
        UniqueConstraint('locale', 'short_name')
    )

    id = Column(Integer, primary_key=True)
    organization_id = Column(ForeignKey('organization.id'), nullable=False)
    locale = Column(String(2), nullable=False)
    long_name = Column(Text, nullable=False)
    short_name = Column(Text, nullable=False)
    annotation = Column(Text, nullable=False, server_default=text("\"\""))

    organization = relationship('Organization')


class TitleTranslation(Base):
    __tablename__ = 'title_translation'
    __table_args__ = (
        UniqueConstraint('locale', 'description'),
        UniqueConstraint('locale', 'title_id')
    )

    id = Column(Integer, primary_key=True)
    title_id = Column(ForeignKey('title.id'), nullable=False)
    locale = Column(String(2), nullable=False)
    description = Column(Text, nullable=False)
    annotation = Column(Text, nullable=False, server_default=text("\"\""))

    title = relationship('Title')


class ExistingRoleTranslation(Base):
    __tablename__ = 'existing_role_translation'
    __table_args__ = (
        UniqueConstraint('existing_role_id', 'locale', 'description'),
        UniqueConstraint('existing_role_id', 'locale')
    )

    id = Column(Integer, primary_key=True)
    existing_role_id = Column(ForeignKey('existing_role.id'), nullable=False)
    locale = Column(String(2), nullable=False)
    description = Column(Text, nullable=False)
    annotation = Column(Text, nullable=False, server_default=text("\"\""))

    existing_role = relationship('ExistingRole')


class User(flask_login.UserMixin, Base):
    __tablename__ = 'user'

    id = Column(Integer, primary_key=True)
    login_name = Column(Text, nullable=False)
    email = Column(Text, nullable=False, unique=True)
    is_enabled = Column(Boolean, nullable=False)
    gender = Column(String(1), nullable=False)
    given_name = Column(Text, nullable=False)
    surname = Column(Text, nullable=False)
    password = Column(Text, nullable=False)
    organization_id = Column(ForeignKey('organization.id'), nullable=False)
    default_role_id = Column(ForeignKey('existing_role.id'), nullable=False)
    default_locale = Column(Integer, nullable=False)
    annotation = Column(Text, nullable=False, server_default=text("\"\""))
    created_at = Column(DateTime, nullable=False, server_default=text("DATETIME('now')"))

    default_role = relationship('ExistingRole')
    organization = relationship('Organization')


class AllowedRoleForUser(Base):
    __tablename__ = 'allowed_role_for_user'
    __table_args__ = (
        UniqueConstraint('user_id', 'existing_role_id'),
    )

    id = Column(Integer, primary_key=True)
    user_id = Column(ForeignKey('user.id'), nullable=False)
    existing_role_id = Column(ForeignKey('existing_role.id'), nullable=False)

    existing_role = relationship('ExistingRole')
    user = relationship('User')
